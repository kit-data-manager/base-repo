# General Spring Boot Settings (do not change!)
spring.main.allow-bean-definition-overriding: true
spring.data.rest.detection-strategy: annotated
spring.jpa.properties.javax.persistence.validation.mode: none

###############################################################################
# Server settings
###############################################################################
# port
# compression
# max-file-size - Max size of single files send in one request (-1 = unlimited)
# max-request-size - Max size of the entire request (-1 = unlimited)
# CORS settings
###############################################################################
server.port: 8090
server.compression.enabled: false
spring.servlet.multipart.max-file-size: 100MB
spring.servlet.multipart.max-request-size: 100MB
# Added as workaround for issue https://github.com/spring-cloud/spring-cloud-gateway/issues/3154
spring.cloud.gateway.proxy.sensitive=content-length

#Required for running base-repo via https
#server.ssl.key-store: keystore.p12
#server.ssl.key-store-password: test123
#server.ssl.keyStoreType: PKCS12
#server.ssl.keyAlias: tomcat

# CORS settings including their default values. Please uncomment and change for stricter CORS policies. 
#repo.security.enable-csrf:false
#repo.security.allowedOriginPattern:*
#repo.security.allowedMethods:GET,POST,PUT,PATCH,DELETE,OPTIONS
#repo.security.exposedHeaders:Content-Range,ETag,Link
#repo.security.allowedHeaders:*

###############################################################################
# Database
#
# Spring Datasource Settings, e.g database type, connection string and login credentials.
# Furthermore, the settings at the end allow to enable logging of SQL queries for 
# debugging. By default, SQL logging should be disabled for performance reasons.
###############################################################################
spring.datasource.driver-class-name: org.h2.Driver
spring.datasource.url:  jdbc:h2:file:/tmp/base-repo/database;MODE=LEGACY;NON_KEYWORDS=VALUE
spring.datasource.username: sa
spring.datasource.password: sa
spring.jpa.hibernate.ddl-auto: update

# For production, PostgreSQL is recommended
#spring.datasource.platform: postgres
#spring.jpa.database: POSTGRESQL
#spring.jpa.database-platform: org.hibernate.dialect.PostgreSQLDialect
#spring.datasource.driverClassName: org.postgresql.Driver
#spring.datasource.url: jdbc:postgresql://localhost:5432/kitdm20
#spring.datasource.username: 
#spring.datasource.password:
#spring.jpa.hibernate.ddl-auto: update

##spring.datasource.hikari.minimumIdle=1
##spring.datasource.hikari.maximumPoolSize=1
 
###############################################################################
# Actuator Endpoints for Health Checks
#
# Spring Management Endpoint Settings. By default, health and info endpoints will be 
# exposed to apply service monitoring including detailed information. Both endpoints
# are accessible without authentication. 
# Furthermore, all endpoints will be exposed to external access. If this is not desired, 
# just comment the property 'management.endpoints.web.exposure.include' in order to only 
# allow local access.
###############################################################################
management.endpoint.health.enabled: true
management.endpoint.health.show-details: when-authorized
management.endpoint.health.sensitive: true
management.endpoints.web.exposure.include: health,info


#spring.security.user.name=admin
#spring.security.user.password=secret
#spring.security.user.roles=ADMIN

###############################################################################
# Spring Cloud
###############################################################################
spring.cloud.config.enabled: false
eureka.client.enabled: false

###############################################################################
# Messaging - RabbitMQ
###############################################################################
# This section allows to configure messaging, i.e., make base-repo to emit messages
# on certain operation to the configured RabbitMQ instance. If messaging is disabled,
# i.e., no RabbitMQ instance is running, the health check should also be disabled. 
# Otherwise, the health status of base-repo will be DOWN as the RabbitMQ healtch check fails.
# For all other settings, please refer to the base-repo documentation.

repo.messaging.enabled: false
management.health.rabbit.enabled:false
repo.messaging.hostname: localhost
repo.messaging.port: 5672
repo.messaging.username: guest
repo.messaging.password: guest
repo.messaging.topic: repository_events
repo.messaging.binding.exchange: repository_events
repo.messaging.binding.queue: repoEventQueue
repo.messaging.binding.routingKeys: dataresource.#

###############################################################################
# Search - Elastic
###############################################################################
# If enabled, searching DataResources via an associated Elastic index will be available. 
# An additional endpoint at /api/v1/search will be activated querying the Elastic instance 
# at 'repo.search.url' and index 'repo.search.index'. 
# To fill the index, the same settings will be used if 'repo.search.enabled' is set 'true'. 
# The base-repo will index all DataResources and their ContentInformation in an index 'baserepo',
# Therefore, 'repo.search.index' should not be changed unless you want to query additional indices
# for a special use case. In that case, you can provide multiple indices separated by comma, 
# e.g., baserepo,additionalIndex
# If indexing is enabled, i.e., a connected Elastic instance is expected to run, the elastic health
# endpoint should be also enabled (set 'true'). Otherwise, it may remain disabled.

repo.search.enabled: false
management.health.elasticsearch.enabled:false
repo.search.url:http://localhost:9200
repo.search.index:baserepo
# Workaround for a potential issue with spring cloud 4.1.0 that broke the elastic search proxy
spring.cloud.gateway.proxy.sensitive=content-length

###############################################################################
# Logging settings
###############################################################################
logging.level.org.springframework: WARN 
logging.level.edu.kit.datamanager: WARN 

#logging.file.path:log
#logging.pattern.file:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx 
#spring.output.ansi.enabled:ALWAYS

###############################################################################
# Repository Settings - General
###############################################################################

# Enable/disable (default) authentication. If authentication is enabled, a separate 
# Authentication Service should be used in order to obtain JSON Web Tokens holding 
# login information. The token has then to be provided within the Authentication header
# of each HTTP request with a value of 'Bearer <TOKEN>' without quotes, replacing <TOKEN>
# be the token obtained from the authentication service.
repo.auth.enabled: false

# The jwtSecret is the mutual secret between all trusted services. This means, that if
# authentication is enabled, the jwtSecret used by the Authentication Service to sign
# issued JWTokens must be the same as the jwtSecret of the repository in order to 
# be able to validate the signature. By default, the secret should be selected randomly
# and with a sufficient length.
repo.auth.jwtSecret: vkfvoswsohwrxgjaxipuiyyjgubggzdaqrcuupbugxtnalhiegkppdgjgwxsmvdb

# The base path where all uploaded data will be stored. The base path must be a URI 
# pointing to a local folder.
repo.basepath:file://

# Set the repository to read-only if required, e.g. for fixity or for maintainence.
repo.readonly: false

# The rate in milliseconds at which the repository itself will check for new messages.
# E.g. if a resource has been created, the repository may has to perform additional
# ingest steps. Therefor, special handlers can be added which will be executed at the
# configured repo.schedule.rate if a new message has been received.
repo.schedule.rate: 1000

###############################################################################
# Repository Settings - Content (Data) Versioning
###############################################################################

# Versioning implementation to use with the following options:
# none: No data versioning
# simple: Simple data versioning by storing all file versions
# ocfl: Enhanced file versioning based on the OCFL standard
repo.plugin.versioning: simple
# File storage organization typ with the following options:
# dateBased: Files will be organized in folders based on the upload date of the file  
# idBased: Files will be organized in folders based on the internal identifier of the parent resource
repo.plugin.storage: dateBased
# Pattern used by dateBased storage, which is appended to the base path in order to structure the data located below.
# Supported variables are @{year}, @{month} and @{day}
repo.plugin.storage.date.pathPattern: @{year}/@{month}/@{day}

# Security settings which should remain unchanged where possible. 
# For Cross-Origin requests, allowedOriginPattern might be changed to the (single) origin allowed for requests or to * to allow all origins.
repo.security.enable-csrf=false
repo.security.allowedOriginPattern=http://localhost:*

# Properties of idBased storage defining the characters of the identifier used for each directory (default: 4) and the maxDepth (default: 8).
# WARNING: Due to a bug in repo-core, maxDepth cannot be assigned at the moment. This will change in the next version.
#repo.plugin.storage.id.charPerDirectory: 4
#repo.plugin.storage.id.maxDepth: 8

#OCFL Settings
ocfl.root.repositories.path: <OCFL_DATA_FOLDER>
ocfl.storage.layout: flat
ocfl.storage.layout.truncated.segment.length: 4
ocfl.storage.layout.truncated.dept.tree.length: 3
ocfl.root.repository.name: ocflRepository
ocfl.hashing.digest.algorithm: md5
ocfl.repository.statistics.file.name: statistic.json
ocfl.default.repository: default

###############################################################################
# Repository Settings - Keycloak (AAI access)
###############################################################################

# Disabled by default
spring.autoconfigure.exclude: org.keycloak.adapters.springboot.KeycloakAutoConfiguration,org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
keycloakjwt.jwk-url: <keycloak-jwk-endpoint, e.g., http://localhost:8080/realms/myrealm/protocol/openid-connect/certs>
keycloakjwt.resource: <client-identifier-in-realm>
keycloakjwt.jwt-claim: preferred_username
#keycloakjwt.connect-timeoutms=500 //optional
#keycloakjwt.read-timeoutms=500 // optional

keycloak.realm: <keycloak-realm>
keycloak.auth-server-url: <keycloak-auth-url, e.g. http://127.0.0.1:8080/>
keycloak.resource: <client-identifier-in-realm>


###############################################################################
# Plugin Settings - General
###############################################################################

# The repository base URL used by a plugin to obtain resources via the RESTful API. 
# This property is generic for all plugins and mainly depends on the property 
# 'server.port' defined at the beginning of this document.
repo.plugin.repositoryBaseUrl: http://localhost:8090/api/v1/dataresources/


###############################################################################
# Repository Settings - OAI-PMH
###############################################################################

# Maximum number of elements delivered by the OAI-PMH endpoint (if enabled) before 
# making use of resumption tokens.
repo.plugin.oaipmh.maxElementsPerList: 100

###############################################################################
# Repository Settings - Digital Object Interface Protocol (DOIP
###############################################################################
repo.plugin.doip.enabled: false
repo.plugin.doip.port: 9000
repo.plugin.doip.repoBaseUri: http://localhost:8090/api/v1/dataresources/
