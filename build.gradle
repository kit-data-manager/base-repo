plugins { 
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.freefair.lombok' version '8.13.1'
    id 'io.freefair.maven-publish-java' version '8.13.1'
    id 'org.owasp.dependencycheck' version '12.1.3'
    id 'org.asciidoctor.jvm.convert' version '4.0.4'
    id 'net.researchgate.release' version '3.1.0'
    id 'com.gorylenko.gradle-git-properties' version '2.5.0'
    id 'java'
    id 'jacoco'
}

jar {
    archiveBaseName = 'base-repo'
    // version is defined in file 'gradle.properties'
    archiveVersion = System.getenv('version')
}

repositories {
    mavenLocal() 
    mavenCentral()
}


//configurations {
 //   all*.exclude module : 'spring-boot-starter-logging'
//}

ext {
    set('javersVersion', "7.8.0")
    set('springBootVersion', "3.2.1")
    set('springDocVersion', "2.8.8")
    set('keycloakVersion', "19.0.0")

    // directory for generated code snippets during tests
    snippetsDir = file("build/generated-snippets")
}

println "Running gradle version: $gradle.gradleVersion"
println "Building ${name} version: ${version}"
println "JDK version: ${JavaVersion.current()}"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

if (System.getProperty('profile') == 'minimal') {
    println 'Using minimal profile for building ' + project.getName()
    apply from: 'gradle/profile-minimal.gradle'   
} else {
    println 'Using default profile executing all tests for building ' + project.getName()
    apply from: 'gradle/profile-complete.gradle'
}

dependencies {
   // boot starter
    implementation "org.springframework.boot:spring-boot-starter-validation"    
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation 'org.springframework.data:spring-data-elasticsearch:5.5.0'

    implementation "org.springframework:spring-messaging:6.2.7"
    
    // cloud support
    implementation "org.springframework.cloud:spring-cloud-starter-config:4.3.0"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.3.0"
    implementation "org.springframework.cloud:spring-cloud-gateway-mvc:4.3.0"
    implementation 'de.codecentric:spring-boot-admin-starter-client:3.5.0'

    // springdoc
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-common:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springDocVersion}"

    implementation "edu.kit.datamanager:repo-core:1.2.5"
    implementation "edu.kit.datamanager:service-base:1.3.4"

    //implementation "com.github.victools:jsonschema-generator:4.23.0"

    //Keycloak
    // implementation "org.keycloak:keycloak-spring-boot-starter:${keycloakVersion}"
    implementation "com.nimbusds:nimbus-jose-jwt:10.3"
   // implementation "io.jsonwebtoken:jjwt-api:0.11.5"
    //implementation "io.jsonwebtoken:jjwt-impl:0.11.5"
    //implementation "io.jsonwebtoken:jjwt-jackson:0.11.5"

    implementation "org.javers:javers-core:${javersVersion}"
    implementation "com.github.fge:json-patch:1.9"
    implementation "com.bazaarvoice.jolt:jolt-core:0.1.7"    
    implementation "com.bazaarvoice.jolt:json-utils:0.1.8"    

   // implementation "javax.xml.bind:jaxb-api:2.3.1"

    runtimeOnly    "org.apache.httpcomponents:httpclient:4.5.14"

     // driver for postgres
    implementation "org.postgresql:postgresql:42.7.6"
    //driver for h2
    implementation "com.h2database:h2:2.3.232"

    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:3.0.3"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework:spring-test"
    testImplementation "org.springframework.security:spring-security-test"
   
    //Java 11 Support 
    testImplementation "org.mockito:mockito-inline:5.2.0"
    testImplementation "junit:junit:4.13.2"
}

if (project.hasProperty('release')) {
    println 'Using \'release\' profile for building ' + project.getName()
    apply from: 'gradle/profile-deploy.gradle'
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
   environment "spring.config.location", "classpath:/test-config/"
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}

springBoot {    
    buildInfo()
}

gitProperties {
    failOnNoGitDirectory = false
}

bootJar {
    println 'Create bootable jar...'
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher'
    }
    launchScript()
}

jacoco {
    toolVersion = "0.8.13"
}

// task for printing project name.
task printProjectName {
    doLast {
        println "${project.name}"
    }
}
